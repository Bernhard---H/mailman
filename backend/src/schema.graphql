type Query {
  domains: [Domain!]!
  domain(id: Int!): Domain
  domainCount: Int!
  accounts(domain: String): [Account!]!
  accountsCount: Int!
  tlspolicies: [TLSPolicy!]!
  tlspoliciesCount: Int!
  aliases(email: String): [Alias!]!
  aliasesCount: Int!
}

type Mutation {
  createAccount(
    email: String
    username: String
    domain: String
    password: String!
    quota: Int
    enabled: Int
    sendonly: Int
  ): Account!
  updateAccount(
    id: Int!
    username: String
    domain: String
    password: String
    quota: Int
    enabled: Int
    sendonly: Int
  ): Account!
  deleteAccount(id: Int!): String!
  createDomain(domain: String!): Domain!
  updateDomain(id: Int!, domain: String!): Domain!
  deleteDomain(id: Int!): String!
}

type Domain {
  id: Int!
  domain: String!
  accounts: AccountList!
}

type AccountList {
  count: Int
  nodes: [Account]!
}

type Account {
  id: Int!
  email: String!
  username: String!
  password: String!
  domain: Domain!
  quota: Int!
  enabled: Int!
  sendonly: Int!
  # Aggregate fields
  count: Int
}

type Alias {
  id: Int!
  sourceEmail: String!
  sourceUsername: String!
  sourceDomain: Domain!
  destinationEmail: String!
  destinationUsername: String!
  destinationDomain: String!
  enabled: Int!
}

type TLSPolicy {
  id: Int!
  domain: String!
  policy: String!
  params: String
}
