type Query {
  domains(pagination: PaginationInput): DomainList!
  domain(id: Int!): Domain
  domainCount: Int!

  accounts(domain: String, pagination: PaginationInput): AccountList!
  account(id: Int!): Account
  accountsCount: Int!

  tlsPolicies(pagination: PaginationInput): TlsPolicyList!
  tlsPoliciesCount: Int!

  aliases(email: String, pagination: PaginationInput): AliasList!
  aliasesCount: Int!
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  updateAccount(id: Int!, data: AccountUpdateInput!): Account!
  deleteAccount(id: Int!): String!

  createDomain(data: DomainInput!): Domain!
  updateDomain(id: Int!, data: DomainInput!): Domain!
  deleteDomain(id: Int!): String!

  createAlias(data: AliasCreateInput!): Alias!
  updateAlias(id: Int!, data: AliasUpdateInput!): Alias!
  deleteAlias(id: Int!): String!

  createTlsPolicy(data: TlsPolicyCreateInput!): TlsPolicy!
  updateTlsPolicy(id: Int!, data: TlsPolicyUpdateInput!): TlsPolicy!
  deleteTlsPolicy(id: Int!): String!
}

type Pagination {
  total: Int
  perPage: Int
  currentPage: Int
  lastPage: Int
}

input PaginationInput {
  perPage: Int
  currentPage: Int
}

## Domains

type Domain {
  id: Int!
  domain: String!
  accounts: AccountList!
}

type DomainList {
  count: Int
  nodes: [Domain]!
  pagination: Pagination
}

input DomainInput {
  domain: String!
}

## Accounts

type Account {
  id: Int!
  email: String!
  username: String!
  password: String!
  domain: Domain!
  quota: Int!
  enabled: Int!
  sendonly: Int!
  # Aggregate fields
  count: Int
}

type AccountList {
  count: Int
  nodes: [Account]!
  pagination: Pagination
}

input AccountCreateInput {
  username: String!
  domain: String!
  password: String!
  quota: Int
  enabled: Int
  sendonly: Int
}

input AccountUpdateInput {
  username: String
  domain: String
  password: String
  quota: Int
  enabled: Int
  sendonly: Int
}

## Aliases

type Alias {
  id: Int!
  sourceEmail: String
  sourceUsername: String!
  sourceDomain: String!
  destinationEmail: String!
  destinationUsername: String!
  destinationDomain: String
  enabled: Int
}

type AliasList {
  count: Int
  nodes: [Alias]!
  pagination: Pagination
}

input AliasCreateInput {
  sourceUsername: String!
  sourceDomain: String!
  destinationUsername: String!
  destinationDomain: String!
  enabled: Int
}

input AliasUpdateInput {
  sourceUsername: String
  sourceDomain: String
  destinationUsername: String
  destinationDomain: String
  enabled: Int
}

## TLS Policies

type TlsPolicy {
  id: Int!
  domain: String!
  policy: String!
  params: String
}

type TlsPolicyList {
  count: Int
  nodes: [TlsPolicy]!
  pagination: Pagination
}

input TlsPolicyCreateInput {
  domain: String!
  policy: String!
  params: String
}

input TlsPolicyUpdateInput {
  domain: String
  policy: String
  params: String
}
